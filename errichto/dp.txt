        good dp problems
        int n;
		cin >> n;
		vector<int> a(n + 1);
		for (int i = 1; i <= n; ++i)
		{
			cin >> a[i];
		}

		vector<bool> dp(n + 1, false);
		dp[0] = true;
		for (int i = 1; i <= n; ++i)
		{
			if (i + a[i] <= n && dp[i - 1])
			{

				dp[i + a[i]] = true;
			}
			if (i - a[i] - 1 >= 0 && dp[i - a[i] - 1])
			{
				dp[i] = true;
			}
		}
		cout << (dp[n] ? "YES" : "NO") << '\n';
good dp problems using recursion
l solve1(int i = 0, ll pow = h, int blue = 1, int green = 2)
{
	if (i == n)
		return 0;
	if (pow > heros[i])
	{
		return solve1(i + 1, pow + heros[i] / 2, blue, green) + 1;
	}
	ll res1 = 0;
	ll res2 = 0;
	if (green)
		res1 = solve1(i, pow * 2, blue, green - 1);
	if (blue)
		res2 = solve1(i, pow * 3, blue - 1, green);
	return max(res1, res2);
}
dp problems based on 2 rows and defined column
         int n; cin >> n;
        string s0, s1; cin >> s0 >> s1;
 
        vector<vector<int>> dp(n, vector<int>(2));
        dp[0][0] = (s0[0] == 'B');
        dp[0][1] = (s1[0] == 'B');
        for (int i=1; i<n; ++i) {
            bool a = (s0[i] == 'B');
            bool b = (s1[i] == 'B');
 
            if (a & b) {
                dp[i][0] = dp[i-1][1];
                dp[i][1] = dp[i-1][0];
            }
            else if (a) {
                dp[i][0] = dp[i-1][0];
            }
            else if (b) {
                dp[i][1] = dp[i-1][1];
            }
        }
 
        cout << (dp[n-1][0] || dp[n-1][1] ? "YES" : "NO") << endl;
again good dp problrm 1700 rating
 	ll n, m, k;
    cin >> n >> m >> k;
    vector<ll> a(n + 1);
    vector<ll> pref(n + 1);
    for (ll i = 1; i <= n; i++)
    {
        cin >> a[i];
        pref[i] = pref[i - 1] + a[i];
    }
    vector<vector<ll>> dp(n + 5, vector<ll>(k+5));
    for (ll i = m; i <= n; i++)
    {
        for (ll j = 1; j <= k; j++)
        {
            dp[i][j] = max(dp[i - 1][j], dp[i - m][j - 1] + pref[i] - pref[i - m]);
        }
    }
    cout << dp[n][k] << endl;