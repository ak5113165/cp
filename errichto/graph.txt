const int N = 200 * 1000 + 11;
int n, m;
int deg[N];
bool used[N];
vector<int> comp;
vector<int> g[N];

void dfs(int v)
{
	used[v] = true;
	comp.push_back(v);

	for (auto to : g[v])
		if (!used[to])
			dfs(to);
}
int main()
{
    cin>>n>>m;
	for (int i = 0; i < m; ++i) {
		int x, y;
		cin>>x>>y;
		--x, --y;
		g[x].push_back(y);
		g[y].push_back(x);
		++deg[x];
		++deg[y];
	}
	
	int ans = 0;
	for (int i = 0; i < n; ++i) {
		if (!used[i]) {
			comp.clear();
			dfs(i);
			bool ok = true;
			for (auto v : comp) ok &= deg[v] == 2;
			if (ok) ++ans;
		}
	}
    return 0;
}
this is function used to find the shortest distanve betwwen 
source to every other node
vector<long long> bfs(int sv, vector<int> &adj)
{
	int n = adj.size();
	queue<long long> q{};
	q.push(sv);
	vector<long long> dist(n, -1);
	vector<bool> vis(n, false);
	vis[sv] = true;
	long long r = 0;
	while (!q.empty())
	{
		int size = q.size();
		while (size--)
		{
			long long node = q.front();
			q.pop();
			dist[node] = r;
			if (adj[node] != -1 and !vis[adj[node]])
			{
				q.push(adj[node]);
				vis[adj[node]] = true;
			}
		}
		r++;
	}
	return dist;
}
function to find the length of cycle
map<int, vector<int>> m;
vector<bool> used;

int go(int v)
{
	used[v] = true;
	for (auto now : m[v])
	{
		if (!used[now])
		{
			return go(now) + 1;
		}
	}
	return 1;
}
function to find the length of cycle and element s as well
int dfs(vector<int> g[], int i, vector<int> &vis, string &s, string &res)
{
	vis[i] = 1;
	res += s[i - 1];
	int ans = 0;
	for (auto c : g[i])
	{
		if (vis[c] == 0)
			ans += dfs(g, c, vis, s, res);
	}
	return 1 + ans;
}
print ing the restore path
vector<int> v;
	int cur = n;
	while (true)
	{
		v.push_back(cur);
		if (cur == 1)
			break;
		cur = parent[cur];
	}
	while (!v.empty())
	{
		cout << v.back() << ' ', v.pop_back();
	}

dijkstra algorithm
vector<pair<int, ll>> g[N]; // child, cost
ll dist[N], parent[N];
int ans=0;
void DIJKSTRA(ll src, ll n)
{
	for (int i = 1; i <= n; ++i)
	{
		dist[i] = 1e18;
	}
	dist[src] = 0;
	priority_queue<pair<ll, int>, vector<pair<int, int>>, greater<>> pq;
	pq.push({dist[src], src});
	while (!pq.empty())
	{
		int node = pq.top().second;
		int cost = pq.top().first;
		pq.pop();
		if (cost > dist[node])
			continue;
		for (auto &i : g[node])
		{
			if(dist[node]+i.second==dist[i.first])
			{
				ans++;
			}
			if (dist[node] + i.second < dist[i.first])
			{
				parent[i.first] = node; // to get the path
				dist[i.first] = dist[node] + i.second;
				pq.push({dist[i.first], i.first});
			}
		}
	}
}
const int maxn = 2e5 + 10;
ll n, m, k, r, c;
ll a[maxn], b[maxn];
char s[3][200005];
ll dp[maxn];
vector<int> g[maxn];
int vis[maxn];

ll dfs(int x, int sum)
{
	if (a[x] > sum)
		return 0;
	if (vis[x] == 1)
		return k;
	if (vis[x] == 2)
		return dp[x];
	dp[x] = 1, vis[x] = 1;
	for (auto to : g[x])
	{
		dp[x] = max(dp[x], (ll)(dfs(to, sum) + 1));
	}
	vis[x] = 2;
	return dp[x];
}

bool judge(int x)
{
	memset(vis, 0, sizeof vis);

	for (int i = 1; i <= n; i++)
	{
		if (!vis[i])
		{
			if (dfs(i, x) >= k)
				return 1;
		}
	}
	return 0;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
	{
		cin >> a[i];
	}
	for (int i = 1; i <= m; i++)
	{
		int u, v;
		cin>>u>>v;
		g[u].push_back(v);
	}
	int ans = 1e9 + 7;
	int l = 1, r = 1e9;
	while (l <= r)
	{
		int mid = (l + r) >> 1;
		if (judge(mid))
		{
			ans = mid;
			r = mid - 1;
		}
		else
		{
			l = mid + 1;
		}
	}
	if (ans == 1e9 + 7)
		cout << -1 << "\n";
	else
		cout << ans << "\n";
	return 0;
}